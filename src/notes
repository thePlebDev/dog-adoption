HIGHER-ORDER COMPONENETS
- its just a function that takes a react component as an argument and returns another React
component. typically they will wrap this incoming component with another component
that carries state
- the wrapping function is what is going to hold the state. That function will pass down
the state of functionality as props


1) have a stateless function, make it dumb (just UI)
2) create a const variable to hold what is returned from the HOC
3) the data handling is done by the HOC
4) create the HOC have it accept the component as an parameter
5) the composed component is then rendered in the HOC


- so A higher order component really doesnt seem that scary. its basically a component that
holds a state and accepts a component as a parameter. this component is then wrapped
(think closures) and has access to the state. Its literally just updating the component.
we only add stuff.
-inside the HOC we create another component that returns the wrapped component
- when we return the wrapped component, we have to make sure that we wrap it with another
component, this will avoid "leaky abstraction". This will also make the HOC a pure function
- if there are props that you do not need to pass through to a component, you can filter
them out with destructing.

THE CREATION
-----------set up--------------------
- the HOC will take a component and a url(for the api call)
- the component that will be wrapping will be a stateless functional component(UI only)
- the url will be to a cat picture api.

----------execution layout------------------
- create the stateless component that will be used for the UI
- create the HOC that will make the API call and pass the info to the wrapped component.
- have the HOC return a new component with the new info
- reference that component in a const varible.
--------actual execution--------------------
- apparently css files apply to all the files and I can not use the same name more than once.
The css file problem just makes me have to be more original with the name creation. Not the
biggest problem but I will have to look into this problem when I create a bigger application.

- the propblem of how I will layout the different kitty posters will be solved with a div and a layout of css grid. Just basic css knowledge.
not sure why that was so scary to me.
- I have decide to create the css grid before the HOC in order to get a better view of the layout
- so the grid was actualy super simple. Its not 100% but It will do for mow

-Now I will create the HOC
- the HOC will be created in its own file and then imported into the file with the stateless function, then create a wrapped funciton and then
that will be used for rendering
- we will pass state and props down to the composed component, through the {...state} {...props} (all the props and all the state)


- the HOC is just a normal Es6 class. with a constructor class to keep the case
- going to make the fetch call on the componenetDidMount(). This gets called once everything else is mounted onto the native UI
- using fetch to call the api in componenetDidMount
- fetch will take one argument the url, and it will return a response object. this is just a response and not an actual json method
- we then have to use the json to get actual json data

- I am using a lot of arrow functions. I should get a better understanding of how they work.
- an arrow function is just an syntactically compact alternative to a regular function expression. just without is own bindings to this,argumnets
super
- you can simply go Identifier => expression
- an arrow function with a block body does not automatically return a value, you still have to use a return statment for that
- the value of this inside an arrow function is always inherited from the enclosing scope
- this has read me down a rabbit hole to better understand the this keyword. It is defined based on the current execution context. there is
the function, the method and the bind execution context. During a normal function execution the this keyword will refer to the global context.
during a method context. The this keyword will refer to the object that It is being called upon. However, if you use a reference of an object
that has bee stored inside a variable then the this keyword will again refer to the global object. on an event handler this also refers to
the global object. when a function is executed, javascript establishes an execution context for the function call, setting this to the
object referenced by whatever came before the last "."

- now I an creating the HOC
- the wrapped component will get the state from the HOC.
-using {..this.state} and {...props} to pass the state and the props down to the wrapped Component
- still not 100% comfortable with props, so I am going to read up some more on them.
- {...props} means that we are passing the props from the old component to the new one that will be wrapped and returned

- now we use destructing to take out the data(url) on the poster component and use it to render a picture.

- now I have to use css to figure out how to get the images to be the same size

- now that I have the css figured out, i will use props for the name and age.

- now I will add the propType checks. React has a built-in property type

------------------ADDING ROUTER------------------------------------------
-instead of creating a new project every time I learn something new. I am going to keep adding to this one.
Maybe by the end of the week, it will actually be a decent website
- now I will add a router for the login page
- the <Route /> component is responsible for rendering some UI when a location matches the route's path.
- we essentialy set up components and we render them. I can think of those components as pages.
- there are two routersm the Hash router and the browser router. the browser needs a special server config and the
hash does not
- So I wrapped my root element in Browser Router tags and everything disappeared, I think this might be because I
havent put what I want to render for the home page

- the two routing components are Switch and Route. When a <Switch> is rendered it searches for its children and looks for the
least specific path to match, this means the <Route>s with longer paths should come before the shorter ones
- the ROute path renders the begging of the url, not the whole thing. because of this we should use the exact path on
the home route, just so it doesnt get triggered every time the try to get a url
-added <Link> components to the <li> tags in order to be able to navigate just by clicking. Whenever we use the link
component a <a/> tag gets rendered to the html.

---------------ADDING REDUX---------------------------------------------------------------------
the main thing that I want is the state from redux. I want to be able to store my info into one source of truth
- redux makes it so that all the state data is stored in a single object. making us able to use a single source of truth

ACTIONS
- actions are payloas of information that send data from the application to your store. They are the only source of information
for the store. actions must have a type property, this will indicate what type of action that is being performed
- when the application gets larger the actions should have there own file
- pass as little data as possible

ACTION CREATORS
- these are functions that create actions. the function returns the action object, They need to be dispatched with the
dispatch function. you can create a bound action creator that auto dispatches and then just call it directly
- will most likely be dispatching actions through the connect method

REDUCERS
-specify how the application's state changes in response to actions sent to the store
- the state seems to be a literalt object inside a normal component
- the reducer is a pure function that takes in an action, the previous state and then returns the next state

STORE
- holds the application state
- the state is stored in a completely separate thing from the components


--------------------------------IMPLEMENTING REDUX---------------------------------------------------
- I have read too much to not start trying to workout what is going on. first I just created a file called state and
put what I want my state to look like
- for the state I created an array for the dogs and an empty array for users
- next I need to create the store. The store is what holds the application's state data and handles all state updates
- the store handles the state updates by passing the current state and action through a single reducer
- for the moment I do not need any actions but I will later
- import the createStore method from redux. This will help us create the "globalized state"
- but I will need a reducer to set up the initial store;
- so the store gets initialized through a single reducer
- we can split the reducers up into different files but then we still have to combine them with the combineReducers method
- I created my super basic reducer that when called will create the store of data

-------------------------------PROPERLY IMPLEMENTING REACT AND REDUX-----------------------------------------------------
-the site react-redux.js.org has official documentation on how to implement Redux and React properly.
- React Redux is the official library on how to bind the two together
- installed it
- then I used the <Provider /> component to make the store available to the rest of your app
- now I will use the connect() function to connect the desired component to the store
- map dispatch to props allows our components to fire of action creators
- map state to props allows the component to subscribe to Redux store updates
- now I will update DoggyPoster.js to use Redux instead.
- I am going to delete the DataComponent.js file but first I will hook up the components with the Redux state
- Now that I think I have used the Connect function property, I am going to use the map function in order to
render multiple poster components based on the state
- map() method creates a new array populated with the results of calling a provided function on every element
- some syntax on the arrrow function is messing me up, so I am going to read up on the arrow function again
- now I will read up on the export and export default
- so with default exports, you can only use one per page and when you import them, you can call them anything you like
- with named exports you can have multiple per page but you need to specifically import them with the {}
- Technically Redux is up and running, its borderline useless in this state but it is worthy to be pushed because its implemented

-----------------------------CONCLUSION AND REVIEW----------------------------------------------------------------------
BAD THINGS:
- it really isnt the best and I think I should add a default picture so it doesnt look weird when the api loads
- the design is kinda weird looking but the box shadow that I used on the hover effect, looks really nice.
- its nothing really complicated like I was hoping to make.
GOODTHINGS:
-I am kind proud of the code that I wrote. I believe that I did a decent job.
- for My first actual website that I managed to create, I am happy.
- I have gotten over my weird mentality of quitting if its not 100%.
- I would like to revisit this project in the future and flush it out some more when I am finished reading the react book that I just bought

OVERALL SCORE:
60% | major room for improvement but heading in the right direction
