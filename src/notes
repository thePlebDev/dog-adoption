HIGHER-ORDER COMPONENETS
- its just a function that takes a react component as an argument and returns another React
component. typically they will wrap this incoming component with another component
that carries state
- the wrapping function is what is going to hold the state. That function will pass down
the state of functionality as props


1) have a stateless function, make it dumb (just UI)
2) create a const variable to hold what is returned from the HOC
3) the data handling is done by the HOC
4) create the HOC have it accept the component as an parameter
5) the composed component is then rendered in the HOC


- so A higher order component really doesnt seem that scary. its basically a component that
holds a state and accepts a component as a parameter. this component is then wrapped
(think closures) and has access to the state. Its literally just updating the component.
we only add stuff.
-inside the HOC we create another component that returns the wrapped component
- when we return the wrapped component, we have to make sure that we wrap it with another
component, this will avoid "leaky abstraction". This will also make the HOC a pure function
- if there are props that you do not need to pass through to a component, you can filter
them out with destructing.

THE CREATION
-----------set up--------------------
- the HOC will take a component and a url(for the api call)
- the component that will be wrapping will be a stateless functional component(UI only)
- the url will be to a cat picture api.

----------execution layout------------------
- create the stateless component that will be used for the UI
- create the HOC that will make the API call and pass the info to the wrapped component.
- have the HOC return a new component with the new info
- reference that component in a const varible.
--------actual execution--------------------
- apparently css files apply to all the files and I can not use the same name more than once.
The css file problem just makes me have to be more original with the name creation. Not the
biggest problem but I will have to look into this problem when I create a bigger application.

- the propblem of how I will layout the different kitty posters will be solved with a div and a layout of css grid. Just basic css knowledge.
not sure why that was so scary to me.
- I have decide to create the css grid before the HOC in order to get a better view of the layout
- so the grid was actualy super simple. Its not 100% but It will do for mow

-Now I will create the HOC
- the HOC will be created in its own file and then imported into the file with the stateless function, then create a wrapped funciton and then
that will be used for rendering
- we will pass state and props down to the composed component, through the {...state} {...props} (all the props and all the state)


- the HOC is just a normal Es6 class. with a constructor class to keep the case
- going to make the fetch call on the componenetDidMount(). This gets called once everything else is mounted onto the native UI
- using fetch to call the api in componenetDidMount
- fetch will take one argument the url, and it will return a response object. this is just a response and not an actual json method
- we then have to use the json to get actual json data

- I am using a lot of arrow functions. I should get a better understanding of how they work.
- an arrow function is just an syntactically compact alternative to a regular function expression. just without is own bindings to this,argumnets
super
- you can simply go Identifier => expression
- an arrow function with a block body does not automatically return a value, you still have to use a return statment for that
- the value of this inside an arrow function is always inherited from the enclosing scope
- this has read me down a rabbit hole to better understand the this keyword. It is defined based on the current execution context. there is
the function, the method and the bind execution context. During a normal function execution the this keyword will refer to the global context.
during a method context. The this keyword will refer to the object that It is being called upon. However, if you use a reference of an object
that has bee stored inside a variable then the this keyword will again refer to the global object. on an event handler this also refers to
the global object. when a function is executed, javascript establishes an execution context for the function call, setting this to the
object referenced by whatever came before the last "."

- now I an creating the HOC
- the wrapped component will get the state from the HOC.
-using {..this.state} and {...props} to pass the state and the props down to the wrapped Component
- still not 100% comfortable with props, so I am going to read up some more on them.
- {...props} means that we are passing the props from the old component to the new one that will be wrapped and returned

- now we use destructing to take out the data(url) on the poster component and use it to render a picture.

- now I have to use css to figure out how to get the images to be the same size

- now that I have the css figured out, i will use props for the name and age.

- now I will add the propType checks. React has a built-in property type


-----------------------------CONCLUSION AND REVIEW----------------------------------------------------------------------
BAD THINGS:
- it really isnt the best and I think I should add a default picture so it doesnt look weird when the api loads
- the design is kinda weird looking but the box shadow that I used on the hover effect, looks really nice.
- its nothing really complicated like I was hoping to make.
GOODTHINGS:
-I am kind proud of the code that I wrote. I believe that I did a decent job.
- for My first actual website that I managed to create, I am happy.
- I have gotten over my weird mentality of quitting if its not 100%.
- I would like to revisit this project in the future and flush it out some more when I am finished reading the react book that I just bought

OVERALL SCORE:
60% | major room for improvement but heading in the right direction 
